// Generated by CoffeeScript 1.6.3
(function() {
  var async, configs, debug, domains, error, express, formidable, fs, images, redis, redis_client, runnables, url, users, uuid, _;

  async = require('async');

  configs = require('../configs');

  debug = require('debug')('users');

  domains = require('../domains');

  error = require('../error');

  express = require('express');

  fs = require('fs');

  formidable = require('formidable');

  users = require('../models/users');

  images = require('../models/images');

  redis = require('redis');

  runnables = require('../models/runnables');

  uuid = require('node-uuid');

  _ = require('lodash');

  url = require('url');

  redis_client = redis.createClient(configs.redis.port, configs.redis.ipaddress);

  module.exports = function(parentDomain) {
    var app, createfile, createindir, deletefile, delrunnable, deltag, deluser, fetchuser, getfile, getmountedfiles, getrunnable, getrunnables, gettag, gettags, getuser, getusers, getvotes, listfiles, patchrunnable, patchuser, postrunnable, posttag, postvote, putrunnable, putuser, removevote, streamupdate, syncfiles, updatefile, writemountedfiles;
    app = module.exports = express();
    app.use(domains(parentDomain));
    fetchuser = function(req, res, next) {
      if (!req.params.userid.match(/^[0-9a-fA-F]{24}$/)) {
        return res.json(404, {
          message: 'user not found'
        });
      } else {
        return users.findUser(req.domain, {
          _id: req.params.userid
        }, function(err, user) {
          if (err) {
            return res.json(err.code, {
              message: err.msg
            });
          } else {
            if (!user) {
              return res.json(404, {
                message: 'user not found'
              });
            } else {
              if (req.params.userid.toString() !== req.user_id.toString()) {
                return res.json(403, {
                  message: 'permission denied'
                });
              } else {
                return next();
              }
            }
          }
        });
      }
    };
    app.post('/users', function(req, res) {
      return users.createUser(req.domain, function(err, user) {
        var access_token;
        if (err) {
          return res.json(err.code, {
            message: err.msg
          });
        } else {
          access_token = uuid.v4();
          return redis_client.psetex([access_token, configs.tokenExpires, user._id], function(err) {
            var data, json_user;
            if (err) {
              throw err;
            }
            json_user = user.toJSON();
            json_user.access_token = access_token;
            if (req.body.email == null) {
              return res.json(201, json_user);
            } else {
              if (req.body.username == null) {
                return res.json(400, {
                  message: 'must provide a username to register with'
                });
              } else {
                if (req.body.password == null) {
                  return res.json(400, {
                    message: 'must provide a password to register with'
                  });
                } else {
                  data = _.pick(req.body, 'email', 'username', 'password');
                  return users.registerUser(req.domain, user._id, data, function(err, user) {
                    if (err) {
                      return res.json(err.code, {
                        message: err.msg
                      });
                    } else {
                      json_user = user.toJSON();
                      delete json_user.password;
                      json_user.access_token = access_token;
                      return res.json(201, json_user);
                    }
                  });
                }
              }
            }
          });
        }
      });
    });
    app.get('/token', function(req, res) {
      var token;
      token = req.get('runnable-token');
      if (token) {
        return res.send(200, token);
      } else {
        return res.send(404);
      }
    });
    app.post('/token', function(req, res) {
      var identity;
      if ((req.body.username == null) && (req.body.email == null)) {
        return res.json(400, {
          message: 'username or email required'
        });
      } else {
        if (req.body.password == null) {
          return res.json(400, {
            message: 'password required'
          });
        } else {
          identity = req.body.email || req.body.username;
          return users.loginUser(req.domain, identity, req.body.password, function(err, user_id) {
            var response, token;
            if (err) {
              return res.json(err.code, {
                message: err.msg
              });
            } else {
              response = function() {
                var access_token;
                access_token = uuid.v4();
                return redis_client.psetex([access_token, configs.tokenExpires, user_id], function(err) {
                  if (err) {
                    throw err;
                  }
                  return res.json({
                    access_token: access_token
                  });
                });
              };
              token = req.get('runnable-token');
              if (!token) {
                return response();
              } else {
                return redis_client.get(token, function(err, old_user_id) {
                  if (err) {
                    throw err;
                  }
                  if (!old_user_id) {
                    return response();
                  } else {
                    return users.findUser(req.domain, {
                      _id: old_user_id
                    }, function(err, old_user) {
                      if (err) {
                        return res.json(err.code, {
                          message: err.msg
                        });
                      } else {
                        if (old_user.password) {
                          return response();
                        } else {
                          return runnables.migrateContainers(req.domain, old_user_id, user_id, req.domain.intercept(function() {
                            return response();
                          }));
                        }
                      }
                    });
                  }
                });
              }
            }
          });
        }
      }
    });
    app.all('*', function(req, res, next) {
      var token;
      if (/\/runnables\?map=true|\/channels\?map=true/.test(url.parse(req.url).path)) {
        return next();
      } else {
        token = req.get('runnable-token');
        if (!token) {
          return res.json(401, {
            message: 'access token required'
          });
        } else {
          return redis_client.get(token, function(err, user_id) {
            if (err) {
              throw err;
            }
            if (!user_id) {
              return res.json(401, {
                message: 'must provide a valid access token'
              });
            } else {
              req.user_id = user_id;
              return next();
            }
          });
        }
      }
    });
    getusers = function(req, res) {
      var sendUsers, userIds;
      sendUsers = function(err, users) {
        if (err) {
          return next(err);
        } else {
          return res.json(users);
        }
      };
      if (req.query.ids) {
        userIds = req.query.ids || [];
        if (!Array.isArray(userIds)) {
          userIds = [userIds];
        }
        return users.publicListWithIds(req.domain, userIds, sendUsers);
      } else if (req.query.username) {
        return users.publicList(req.domain, {
          lower_username: req.query.username.toLowerCase()
        }, sendUsers);
      } else if (req.query.channel) {
        return users.channelLeaders(req.domain, req.query.channel, req.query.idsOnly, sendUsers);
      } else {
        return res.json(400, {
          message: 'must provide ids or username for users to get'
        });
      }
    };
    app.get('/users', getusers);
    getuser = function(req, res) {
      return users.findUser(req.domain, {
        _id: req.user_id
      }, function(err, user) {
        var json_user;
        if (err) {
          return res.json(err.code, {
            message: err.msg
          });
        } else {
          if (!user) {
            return res.json(404, {
              message: 'user doesnt exist'
            });
          } else {
            json_user = user.toJSON();
            json_user.votes = user.getVotes();
            delete json_user.password;
            return images.count({
              owner: user._id
            }, req.domain.intercept(function(imagesCount) {
              json_user.imagesCount = imagesCount;
              return res.json(json_user);
            }));
          }
        }
      });
    };
    app.get('/users/me', getuser);
    app.get('/users/:userid', fetchuser, getuser);
    deluser = function(req, res) {
      return users.removeUser(req.domain, req.user_id, function() {
        return res.json({
          message: 'user deleted'
        });
      });
    };
    app.del('/users/me', deluser);
    app.del('/users/:userid', fetchuser, deluser);
    putuser = function(req, res) {
      return users.findUser(req.domain, {
        _id: req.user_id
      }, function(err, user) {
        var data;
        if (err) {
          return res.json(err.code, {
            message: err.message
          });
        } else {
          if (user.permission_level !== 0) {
            return res.json(403, {
              message: 'you are already registered'
            });
          } else {
            if (req.body.email == null) {
              return res.json(400, {
                message: 'must provide an email to register with'
              });
            } else {
              if (req.body.username == null) {
                return res.json(400, {
                  message: 'must provide a username to register with'
                });
              } else {
                if (req.body.password == null) {
                  return res.json(400, {
                    message: 'must provide a password to register with'
                  });
                } else {
                  data = _.pick(req.body, 'email', 'username', 'password');
                  return users.registerUser(req.domain, req.user_id, data, function(err, user) {
                    if (err) {
                      return res.json(err.code, {
                        message: err.msg
                      });
                    } else {
                      return res.json(user);
                    }
                  });
                }
              }
            }
          }
        }
      });
    };
    app.put('/users/me', putuser);
    app.put('/users/:userid', fetchuser, putuser);
    patchuser = function(req, res) {
      var allowed, data;
      allowed = ['name', 'company', 'show_email', 'initial_referrer'];
      data = _.pick(req.body, allowed);
      return users.updateUser(req.domain, req.user_id, data, {
        password: 0,
        votes: 0
      }, function(err, user) {
        if (err) {
          return res.json(err.code, {
            message: err.msg
          });
        } else {
          return res.json(user);
        }
      });
    };
    app.patch('/users/me', patchuser);
    app.patch('/users/:userid', fetchuser, patchuser);
    getvotes = function(req, res) {
      return users.findUser(req.domain, {
        _id: req.user_id
      }, function(err, user) {
        if (err) {
          return res.json(err.code, {
            message: err.msg
          });
        } else {
          return res.json(user.getVotes());
        }
      });
    };
    app.get('/users/me/votes', getvotes);
    app.get('/users/:userid/votes', fetchuser, getvotes);
    postvote = function(req, res) {
      if (req.body.runnable == null) {
        return res.json(400, {
          message: 'must include runnable to vote on'
        });
      } else {
        return runnables.vote(req.domain, req.user_id, req.body.runnable, function(err, vote) {
          if (err) {
            return res.json(err.code, {
              message: err.msg
            });
          } else {
            return res.json(201, vote);
          }
        });
      }
    };
    app.post('/users/me/votes', postvote);
    app.post('/users/:userid/votes', fetchuser, postvote);
    removevote = function(req, res) {
      return users.findUser(req.domain, {
        _id: req.user_id
      }, function(err, user) {
        return user.removeVote(req.domain, req.params.voteid, function(err) {
          if (err) {
            return res.json(err.code, {
              message: err.msg
            });
          } else {
            return res.json({
              message: 'removed vote'
            });
          }
        });
      });
    };
    app.del('/users/me/votes/:voteid', removevote);
    app.del('/users/:userid/votes/:voteid', fetchuser, removevote);
    postrunnable = function(req, res) {
      if (req.query.from == null) {
        return res.json(400, {
          message: 'must provide a runnable to fork from'
        });
      } else {
        return runnables.createContainer(req.domain, req.user_id, req.query.from, function(err, container) {
          if (err) {
            return res.json(err.code, {
              message: err.msg
            });
          } else {
            return res.json(201, container);
          }
        });
      }
    };
    app.post('/users/me/runnables', postrunnable);
    app.post('/users/:userid/runnables', fetchuser, postrunnable);
    getrunnables = function(req, res) {
      var parent;
      parent = req.query.parent;
      return runnables.listContainers(req.domain, req.user_id, parent, function(err, containers) {
        if (err) {
          return res.json(err.code, {
            message: err.msg
          });
        } else {
          return res.json(containers);
        }
      });
    };
    app.get('/users/me/runnables', getrunnables);
    app.get('/users/:userid/runnables', fetchuser, getrunnables);
    getrunnable = function(req, res) {
      return runnables.getContainer(req.domain, req.user_id, req.params.runnableid, function(err, container) {
        if (err) {
          return res.json(err.code || 500, {
            message: err.msg || err.message
          });
        } else {
          return res.json(container);
        }
      });
    };
    app.get('/users/me/runnables/:runnableid', getrunnable);
    app.get('/users/:userid/runnables/:runnableid', fetchuser, getrunnable);
    putrunnable = function(req, res) {
      var attr, optional, required, set, _i, _len;
      required = ['name', 'description'];
      optional = ['specification', 'saved', 'start_cmd', 'build_cmd', 'output_format', 'status', 'commit_error', 'service_cmds'];
      set = {};
      for (_i = 0, _len = required.length; _i < _len; _i++) {
        attr = required[_i];
        if (req.body[attr] === void 0) {
          return res.json(400, {
            message: 'must provide a runnable ' + attr
          });
        } else {
          set[attr] = req.body[attr];
        }
      }
      optional.forEach(function(attr) {
        if (req.body[attr] !== void 0) {
          return set[attr] = req.body[attr];
        }
      });
      return runnables.updateContainer(req.domain, req.user_id, req.params.runnableid, set, req.get('runnable-token'), function(err, runnable) {
        if (err) {
          return res.json(err.code, {
            message: err.msg
          });
        } else {
          return res.json(runnable);
        }
      });
    };
    app.put('/users/me/runnables/:runnableid', putrunnable);
    app.put('/users/:userid/runnables/:runnableid', fetchuser, putrunnable);
    patchrunnable = function(req, res) {
      var set;
      set = _.pick(req.body, 'name', 'description', 'specification', 'saved', 'start_cmd', 'build_cmd', 'output_format', 'status', 'commit_error', 'service_cmds');
      return runnables.updateContainer(req.domain, req.user_id, req.params.runnableid, set, req.get('runnable-token'), function(err, runnable) {
        if (err) {
          return res.json(err.code, {
            message: err.msg
          });
        } else {
          return res.json(runnable);
        }
      });
    };
    app.patch('/users/me/runnables/:runnableid', patchrunnable);
    app.patch('/users/:userid/runnables/:runnableid', fetchuser, patchrunnable);
    delrunnable = function(req, res) {
      return runnables.removeContainer(req.domain, req.user_id, req.params.runnableid, function(err) {
        if (err) {
          return res.json(err.code, {
            message: err.msg
          });
        } else {
          return res.json({
            message: 'runnable deleted'
          });
        }
      });
    };
    app.del('/users/me/runnables/:runnableid', delrunnable);
    app.del('/users/:userid/runnables/:runnableid', fetchuser, delrunnable);
    gettags = function(req, res) {
      return runnables.getContainerTags(req.domain, req.params.id, function(err, tags) {
        if (err) {
          return res.json(err.code, {
            message: err.msg
          });
        } else {
          return res.json(tags);
        }
      });
    };
    app.get('/users/me/runnables/:id/tags', gettags);
    app.get('/users/:userid/runnables/:id/tags', fetchuser, gettags);
    posttag = function(req, res) {
      if (req.body.name == null) {
        return res.json(400, {
          message: 'tag must include a name field'
        });
      } else {
        return runnables.addContainerTag(req.domain, req.user_id, req.params.id, req.body.name, function(err, tag) {
          if (err) {
            return res.json(err.code, {
              message: err.msg
            });
          } else {
            return res.json(201, tag);
          }
        });
      }
    };
    app.post('/users/me/runnables/:id/tags', posttag);
    app.post('/users/:userid/runnables/:id/tags', fetchuser, posttag);
    gettag = function(req, res) {
      return runnables.getContainerTag(req.domain, req.params.id, req.params.tagId, function(err, tag) {
        if (err) {
          return res.json(err.code, {
            message: err.msg
          });
        } else {
          return res.json(tag);
        }
      });
    };
    app.get('/users/me/runnables/:id/tags/:tagId', gettag);
    app.get('/users/:userid/runnables/:id/tags/:tagId', fetchuser, gettag);
    deltag = function(req, res) {
      return runnables.removeContainerTag(req.domain, req.user_id, req.params.id, req.params.tagId, function(err) {
        if (err) {
          return res.json(err.code, {
            message: err.msg
          });
        } else {
          return res.json({
            message: 'tag deleted'
          });
        }
      });
    };
    app.del('/users/me/runnables/:id/tags/:tagId', deltag);
    app.del('/users/:userid/runnables/:id/tags/:tagId', fetchuser, deltag);
    listfiles = function(req, res) {
      var content, default_tag, dir, path;
      content = req.query.content != null;
      dir = req.query.dir != null;
      default_tag = req.query["default"] != null;
      path = req.query.path;
      return runnables.listFiles(req.domain, req.user_id, req.params.runnableid, content, dir, default_tag, path, function(err, files) {
        if (err) {
          return res.json(err.code, {
            message: err.msg
          });
        } else {
          return res.json(files);
        }
      });
    };
    app.get('/users/me/runnables/:runnableid/files', listfiles);
    app.get('/users/:userid/runnables/:runnableid/files', fetchuser, listfiles);
    syncfiles = function(req, res) {
      return runnables.syncFiles(req.domain, req.user_id, req.params.id, function(err) {
        if (err) {
          return res.json(err.code, {
            message: err.msg
          });
        } else {
          return res.json(201, {
            message: 'files synced successfully',
            date: new Date()
          });
        }
      });
    };
    app.post('/users/me/runnables/:id/sync', syncfiles);
    app.post('/users/:userid/runnables/:id/sync', fetchuser, syncfiles);
    createfile = function(req, res) {
      var contentType, form;
      contentType = req.headers['content-type'];
      if (contentType === 'application/json') {
        if (req.body.dir) {
          if (req.body.name == null) {
            return res.json(400, {
              message: 'dir must include a name field'
            });
          } else {
            if (req.body.path == null) {
              return res.json(400, {
                message: 'dir must include a path field'
              });
            } else {
              return runnables.createDirectory(req.domain, req.user_id, req.params.id, req.body.name, req.body.path, function(err, dir) {
                if (err) {
                  return res.json(err.code, {
                    message: err.msg
                  });
                } else {
                  return res.json(201, dir);
                }
              });
            }
          }
        } else {
          if (req.body.name == null) {
            return res.json(400, {
              message: 'file must include a name field'
            });
          } else {
            if (req.body.content == null) {
              return res.json(400, {
                message: 'file must include a content field'
              });
            } else {
              if (req.body.path == null) {
                return res.json(400, {
                  message: 'file must include a path field'
                });
              } else {
                return runnables.createFile(req.domain, req.user_id, req.params.id, req.body.name, req.body.path, req.body.content, function(err, file) {
                  if (err) {
                    return res.json(err.code, {
                      message: err.msg
                    });
                  } else {
                    return res.json(201, file);
                  }
                });
              }
            }
          }
        }
      } else {
        if (/multipart\/form-data/.test(contentType)) {
          form = new formidable.IncomingForm();
          return form.parse(req, function(err, fields, files) {
            var file, files_array, key;
            files_array = [];
            for (key in files) {
              file = files[key];
              files_array.push(file);
            }
            return async.mapSeries(files_array, function(file, cb) {
              var filestream;
              filestream = fs.createReadStream(file.path);
              filestream.pause();
              return runnables.createFile(req.domain, req.user_id, req.params.id, file.name, '/', filestream, cb);
            }, function(err, files) {
              if (err) {
                return res.json(err.code, {
                  message: err.msg
                });
              } else {
                return res.json(201, files);
              }
            });
          });
        } else {
          return res.json(400, {
            message: 'content type must be application/json or multipart/form-data'
          });
        }
      }
    };
    app.post('/users/me/runnables/:id/files/', createfile);
    app.post('/users/me/runnables/:id/files', createfile);
    app.post('/users/:userid/runnables/:id/files/', fetchuser, createfile);
    app.post('/users/:userid/runnables/:id/files', fetchuser, createfile);
    streamupdate = function(req, res) {
      var contentType, form;
      contentType = req.headers['content-type'];
      if (/multipart\/form-data/.test(contentType)) {
        form = new formidable.IncomingForm();
        return form.parse(req, function(err, fields, files) {
          var file, files_array, key;
          files_array = [];
          for (key in files) {
            file = files[key];
            files_array.push(file);
          }
          return async.mapSeries(files_array, function(file, cb) {
            var filestream;
            filestream = fs.createReadStream(file.path);
            filestream.pause();
            return runnables.updateFileContents(req.domain, req.user_id, req.params.id, "/" + file.name, filestream, cb);
          }, function(err, files) {
            if (err) {
              return res.json(err.code, {
                message: err.msg
              });
            } else {
              return res.json(200, files);
            }
          });
        });
      } else {
        return res.json(400, {
          message: 'content type must be application/json or multipart/form-data'
        });
      }
    };
    app.put('/users/me/runnables/:id/files', streamupdate);
    app.put('/users/:userid/runnables/:id/files', fetchuser, streamupdate);
    createindir = function(req, res) {
      var contentType, form;
      contentType = req.headers['content-type'];
      if (/multipart\/form-data/.test(contentType)) {
        form = new formidable.IncomingForm();
        return form.parse(req, function(err, fields, files) {
          var file, files_array, key;
          files_array = [];
          for (key in files) {
            file = files[key];
            files_array.push(file);
          }
          return runnables.readFile(req.domain, req.user_id, req.params.id, req.params.fileid, function(err, root) {
            if (err) {
              return res.json(err.code, {
                message: err.msg
              });
            } else {
              if (!root.dir) {
                return res.json(403, {
                  message: 'resource is not of directory type'
                });
              } else {
                return async.mapSeries(files_array, function(file, cb) {
                  var filestream;
                  filestream = fs.createReadStream(file.path);
                  filestream.pause();
                  return runnables.createFile(req.domain, req.user_id, req.params.id, file.name, "" + root.path + "/" + root.name, filestream, cb);
                }, function(err, files) {
                  if (err) {
                    return res.json(err.code, {
                      message: err.msg
                    });
                  } else {
                    return res.json(201, files);
                  }
                });
              }
            }
          });
        });
      } else {
        return res.json(400, {
          message: 'content type must be multipart/form-data'
        });
      }
    };
    app.post('/users/me/runnables/:id/files/:fileid', createindir);
    app.post('/users/:userid/runnables/:id/files/:fileid', fetchuser, createindir);
    getfile = function(req, res) {
      return runnables.readFile(req.domain, req.user_id, req.params.id, req.params.fileid, function(err, file) {
        if (err) {
          return res.json(err.code, {
            message: err.msg
          });
        } else {
          return res.json(file);
        }
      });
    };
    app.get('/users/me/runnables/:id/files/:fileid', getfile);
    app.get('/users/:userid/runnables/:id/files/:fileid', fetchuser, getfile);
    updatefile = function(req, res) {
      var contentType, form;
      contentType = req.headers['content-type'];
      if (contentType === 'application/json') {
        return async.waterfall([
          function(cb) {
            var file;
            file = null;
            if (req.body.content == null) {
              return cb(null, file);
            } else {
              return runnables.updateFile(req.domain, req.user_id, req.params.id, req.params.fileid, req.body.content, cb);
            }
          }, function(file, cb) {
            if (req.body.path == null) {
              return cb(null, file);
            } else {
              return runnables.moveFile(req.domain, req.user_id, req.params.id, req.params.fileid, req.body.path, cb);
            }
          }, function(file, cb) {
            if (req.body.name == null) {
              return cb(null, file);
            } else {
              return runnables.renameFile(req.domain, req.user_id, req.params.id, req.params.fileid, req.body.name, cb);
            }
          }, function(file, cb) {
            if (req.body["default"] == null) {
              return cb(null, file);
            } else {
              return runnables.defaultFile(req.domain, req.user_id, req.params.id, req.params.fileid, req.body["default"], cb);
            }
          }
        ], function(err, file) {
          if (err) {
            return res.json(err.code, {
              message: err.msg
            });
          } else {
            if (!file) {
              return res.json(400, {
                message: 'must provide content, name, path or tag to update operation'
              });
            } else {
              return res.json(file);
            }
          }
        });
      } else {
        if (/multipart\/form-data/.test(contentType)) {
          form = new formidable.IncomingForm();
          return form.parse(req, function(err, fields, files) {
            var file, files_array, key;
            files_array = [];
            for (key in files) {
              file = files[key];
              files_array.push(file);
            }
            return runnables.readFile(req.domain, req.user_id, req.params.id, req.params.fileid, function(err, root) {
              if (err) {
                return res.json(err.code, {
                  message: err.msg
                });
              } else {
                if (!root.dir) {
                  return res.json(403, {
                    message: 'resource is not of directory type'
                  });
                } else {
                  return async.mapSeries(files_array, function(file, cb) {
                    var filestream;
                    filestream = fs.createReadStream(file.path);
                    filestream.pause();
                    return runnables.updateFileContents(req.domain, req.user_id, req.params.id, "" + root.path + "/" + root.name + "/" + file.name, filestream, cb);
                  }, function(err, files) {
                    if (err) {
                      return res.json(err.code, {
                        message: err.msg
                      });
                    } else {
                      return res.json(200, files);
                    }
                  });
                }
              }
            });
          });
        } else {
          return res.json(400, {
            message: 'content type must be application/json or multipart/form-data'
          });
        }
      }
    };
    app.put('/users/me/runnables/:id/files/:fileid', updatefile);
    app.patch('/users/me/runnables/:id/files/:fileid', updatefile);
    app.put('/users/:userid/runnables/:id/files/:fileid', fetchuser, updatefile);
    app.patch('/users/:userid/runnables/:id/files/:fileid', fetchuser, updatefile);
    deletefile = function(req, res) {
      var recursive;
      recursive = req.query.recursive != null ? req.query.recursive : true;
      return runnables.deleteFile(req.domain, req.user_id, req.params.id, req.params.fileid, recursive, function(err) {
        if (err) {
          return res.json(err.code, {
            message: err.msg
          });
        } else {
          return res.json({
            message: 'file deleted'
          });
        }
      });
    };
    app.del('/users/me/runnables/:id/files/:fileid', deletefile);
    app.del('/users/:userid/runnables/:id/files/:fileid', fetchuser, deletefile);
    getmountedfiles = function(req, res) {
      var mountDir;
      mountDir = req.query.path || '/';
      return runnables.getMountedFiles(req.domain, req.user_id, req.params.id, req.params.fileid, mountDir, function(err, files) {
        if (err) {
          return res.json(err.code, {
            message: err.msg
          });
        } else {
          return res.json(files);
        }
      });
    };
    app.get('/users/me/runnables/:id/files/:fileid/files', getmountedfiles);
    app.get('/users/:userid/runnables/:id/files/:fileid/files', fetchuser, getmountedfiles);
    writemountedfiles = function(req, res) {
      return res.json(403, {
        message: 'mounted file-system is read-only'
      });
    };
    app.post('/users/me/runnables/:id/files/:fileid/files', writemountedfiles);
    app.post('/users/:userid/runnables/:id/files/:fileid/files', fetchuser, writemountedfiles);
    return app;
  };

}).call(this);

/*
//@ sourceMappingURL=users.map
*/
