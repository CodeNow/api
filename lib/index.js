// Generated by CoffeeScript 1.6.3
(function () {
  var App, caching, campaigns, categories, channels, cleanup, cluster, configs, debug, domains, error, express, hour, http, impexp, implementations, mongoose, musers, nodetime, rollbar, runnables, specifications, users;
  caching = require('./models/caching');
  cluster = require('cluster');
  cleanup = require('./cleanup');
  configs = require('./configs');
  debug = require('debug')('worker');
  domains = require('./domains');
  error = require('./error');
  express = require('express');
  http = require('http');
  impexp = require('./rest/impexp');
  mongoose = require('mongoose');
  nodetime = require('nodetime');
  rollbar = require('rollbar');
  runnables = require('./rest/runnables');
  users = require('./rest/users');
  musers = require('./models/users');
  channels = require('./rest/channels');
  categories = require('./rest/categories');
  specifications = require('./rest/specifications');
  implementations = require('./rest/implementations');
  campaigns = require('./rest/campaigns');
  hour = 1000 * 60 * 60;
  mongoose.connect(configs.mongo);
  if (configs.rollbar) {
    rollbar.init(configs.rollbar.key, configs.rollbar.options);
  }
  App = (function () {
    function App(configs, domain) {
      var _this = this;
      this.configs = configs;
      this.domain = domain;
      this.started = false;
      this.create();
      setTimeout(function () {
        _this.stop();
        return _this.cleanup_worker();
      }, hour * 9 + Math.random() * hour * 6);
    }
    App.prototype.start = function (cb) {
      var _this = this;
      if (this.started) {
        return cb();
      } else {
        this.listener = function (err) {
          if (_this.domain && configs.throwErrors) {
            return _this.domain.emit('error', err);
          } else {
            return _this.stop(function () {
              if (cluster.isWorker) {
                return _this.cleanup_worker();
              }
            });
          }
        };
        process.on('uncaughtException', this.listener);
        return this.server.listen(this.configs.port, this.configs.ipaddress || '0.0.0.0', function (err) {
          if (err) {
            return cb(err);
          } else {
            _this.started = true;
            return cb();
          }
        });
      }
    };
    App.prototype.stop = function (cb) {
      var _this = this;
      if (!this.started) {
        return cb();
      } else {
        process.removeListener('uncaughtException', this.listener);
        return this.server.close(function (err) {
          if (err) {
            return cb(err);
          } else {
            _this.started = false;
            delete _this.listener;
            return cb();
          }
        });
      }
    };
    App.prototype.create = function () {
      var app, _this = this;
      app = express();
      app.use(domains(this.domain));
      if (configs.logExpress) {
        app.use(express.logger());
      }
      app.use(express.json());
      app.use(express.urlencoded());
      app.use(users(this.domain));
      app.use(impexp(this.domain));
      app.use(runnables(this.domain));
      app.use(channels(this.domain));
      app.use(categories(this.domain));
      app.use(specifications(this.domain));
      app.use(implementations(this.domain));
      app.use(campaigns(this.domain));
      app.use(app.router);
      if (configs.nodetime) {
        app.use(nodetime.expressErrorHandler());
      }
      if (configs.rollbar) {
        app.use(rollbar.errorHandler());
      }
      app.use(function (err, req, res, next) {
        if (configs.logErrorStack) {
          console.log(err.stack);
        }
        if (!err.domain && configs.throwErrors && req.parentDomain) {
          return req.parentDomain.emit('error', err);
        } else {
          res.json(500, {
            message: 'something bad happened :(',
            error: err.message
          });
          return _this.stop(function () {
            if (cluster.isWorker) {
              return _this.cleanup_worker();
            }
          });
        }
      });
      app.get('/cleanup', cleanup);
      app.get('/cache', caching.updateAllCaches);
      app.get('/', function (req, res) {
        return res.json({ message: 'runnable api' });
      });
      app.all('*', function (req, res) {
        return res.json(404, { message: 'resource not found' });
      });
      this.server = http.createServer(app);
      return this.server;
    };
    App.prototype.cleanup_worker = function () {
      var workerId;
      workerId = cluster.worker.process.pid;
      debug('sending exception message to master', workerId);
      cluster.worker.send('exception');
      if (configs.nodetime) {
        nodetime.destroy();
      }
      if (configs.rollbar) {
        rollbar.shutdown();
      }
      return setTimeout(function () {
        var exception_err, timer;
        try {
          debug('waiting for worker to shut down gracefully', workerId);
          timer = setTimeout(function () {
            debug('forcefully shutting down worker', workerId);
            return process.exit(1);
          }, 30000);
          timer.unref();
        } catch (_error) {
          exception_err = _error;
          if (configs.logErrorStack) {
            console.log(exception_err.stack);
          }
        }
        debug('disconnecting worker', workerId);
        return cluster.worker.disconnect();
      }, 10000);
    };
    return App;
  }());
  module.exports = App;
}.call(this));  /*
//@ sourceMappingURL=index.map
*/